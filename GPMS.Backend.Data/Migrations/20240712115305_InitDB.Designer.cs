// <auto-generated />
using System;
using GPMS.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GPMS.Backend.Data.Migrations
{
    [DbContext(typeof(GPMSDbContext))]
    [Migration("20240712115305_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionEstimation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Batch")
                        .HasColumnType("int");

                    b.Property<int?>("DayNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int>("OvertimeQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductionRequirementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Quarter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionRequirementId");

                    b.ToTable("ProductionEstimation");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualStartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 12, 11, 53, 5, 115, DateTimeKind.Utc).AddTicks(6392));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedStartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentProductionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentProductionPlanId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("ProductionPlan");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Batch")
                        .HasColumnType("int");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int>("OvertimeQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductSpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Quarter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductSpecificationId");

                    b.HasIndex("ProductionPlanId");

                    b.ToTable("ProductionRequirement");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionSeries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CurrentProcess")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FaultyQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductionEstimationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ProductionEstimationId");

                    b.ToTable("ProductionSeries");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ConsumptionUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SizeWidthUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Material");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 12, 11, 53, 5, 104, DateTimeKind.Utc).AddTicks(2732));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageURLs")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductProductionProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("ProductProductionProcess");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<float>("OutputPerHour")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductionProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("StandardTime")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ProductionProcessId");

                    b.ToTable("ProductionProcessStep");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStepIO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Consumption")
                        .HasColumnType("real");

                    b.Property<bool>("IsProduct")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionProcessStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SemiFinishedProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductionProcessStepId");

                    b.HasIndex("SemiFinishedProductId");

                    b.ToTable("ProductionProcessStepIO");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.SemiFinishedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("SemiFinishedProduct");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.BillOfMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Consumption")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductSpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("SizeWidth")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductSpecificationId");

                    b.ToTable("BillOfMaterial");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Measure")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductSpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductSpecificationId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.ProductSpecification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductSpecification");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.QualityStandard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductSpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductSpecificationId");

                    b.ToTable("QualityStandard");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Requests.InspectionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 12, 11, 53, 5, 84, DateTimeKind.Utc).AddTicks(9397));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductionSeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ProductionSeriesId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("InspectionRequest");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Requests.WarehouseRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 12, 11, 53, 5, 146, DateTimeKind.Utc).AddTicks(1088));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductionRequirementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ProductionRequirementId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("WarehouseRequest");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.FaultyProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 12, 11, 53, 5, 82, DateTimeKind.Utc).AddTicks(7843));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("InspectionRequestResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductOrderNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("SpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InspectionRequestResultId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("FaultyProduct");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.InspectionRequestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 12, 11, 53, 5, 95, DateTimeKind.Utc).AddTicks(2283));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FaultyQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("InspectionRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("InspectionRequestId")
                        .IsUnique();

                    b.ToTable("InspectionRequestResult");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.ProductFault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("FaultyProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductMeasurementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionProcessStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QualityStandardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FaultyProductId");

                    b.HasIndex("ProductMeasurementId");

                    b.HasIndex("ProductionProcessStepId");

                    b.HasIndex("QualityStandardId");

                    b.ToTable("ProductFault");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.ProductionProcessStepIOResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Consumption")
                        .HasColumnType("real");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("StepIOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StepResultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StepIOId");

                    b.HasIndex("StepResultId");

                    b.ToTable("ProductionProcessStepIOResult");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.ProductionProcessStepResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 12, 11, 53, 5, 130, DateTimeKind.Utc).AddTicks(4788));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("InspectionRequestResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductionProcessStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionSeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InspectionRequestResultId")
                        .IsUnique()
                        .HasFilter("[InspectionRequestResultId] IS NOT NULL");

                    b.HasIndex("ProductionProcessStepId");

                    b.HasIndex("ProductionSeriesId");

                    b.ToTable("ProductionProcessStepResult");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Staffs.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 12, 11, 53, 5, 72, DateTimeKind.Utc).AddTicks(6710));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Staffs.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Staffs.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Warehouses.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Warehouses.WarehouseTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 12, 11, 53, 5, 151, DateTimeKind.Utc).AddTicks(6917));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ProductSpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WarehouseRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductSpecificationId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WarehouseRequestId")
                        .IsUnique()
                        .HasFilter("[WarehouseRequestId] IS NOT NULL");

                    b.ToTable("WarehouseTicket");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionEstimation", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.ProductionPlans.ProductionRequirement", "ProductionRequirement")
                        .WithMany("ProductionEstimations")
                        .HasForeignKey("ProductionRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionRequirement");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionPlan", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Creator")
                        .WithMany("CreatedProductionPlans")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.ProductionPlans.ProductionPlan", "ParentProductionPlan")
                        .WithMany("ChildProductionPlans")
                        .HasForeignKey("ParentProductionPlanId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Reviewer")
                        .WithMany("ReviewedProductionPlans")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("ParentProductionPlan");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionRequirement", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Specifications.ProductSpecification", "ProductSpecification")
                        .WithMany("ProductionRequirements")
                        .HasForeignKey("ProductSpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.ProductionPlans.ProductionPlan", "ProductionPlan")
                        .WithMany("ProductionRequirements")
                        .HasForeignKey("ProductionPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductSpecification");

                    b.Navigation("ProductionPlan");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionSeries", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.ProductionPlans.ProductionEstimation", "ProductionEstimation")
                        .WithMany("ProductionSeries")
                        .HasForeignKey("ProductionEstimationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductionEstimation");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Product", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Creator")
                        .WithMany("CreatedProducts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Reviewer")
                        .WithMany("ReviewedProducts")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductProductionProcess", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Product", "Product")
                        .WithMany("ProductionProcesses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStep", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductProductionProcess", "ProductionProcess")
                        .WithMany("Steps")
                        .HasForeignKey("ProductionProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductionProcess");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStepIO", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Material", "Material")
                        .WithMany("ProcessStepIOs")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStep", "ProductionProcessStep")
                        .WithMany("ProductionProcessStepIOs")
                        .HasForeignKey("ProductionProcessStepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Products.SemiFinishedProduct", "SemiFinishedProduct")
                        .WithMany("ProductionProcessStepIOs")
                        .HasForeignKey("SemiFinishedProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Material");

                    b.Navigation("ProductionProcessStep");

                    b.Navigation("SemiFinishedProduct");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.SemiFinishedProduct", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Product", "Product")
                        .WithMany("SemiFinishedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.BillOfMaterial", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Material", "Material")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Products.Specifications.ProductSpecification", "ProductSpecification")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("ProductSpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("ProductSpecification");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.Measurement", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Specifications.ProductSpecification", "ProductSpecification")
                        .WithMany("Measurements")
                        .HasForeignKey("ProductSpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductSpecification");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.ProductSpecification", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Product", "Product")
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Warehouses.Warehouse", "Warehouse")
                        .WithMany("Specifications")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.QualityStandard", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Material", "Material")
                        .WithMany("QualityStandards")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GPMS.Backend.Data.Models.Products.Specifications.ProductSpecification", "ProductSpecification")
                        .WithMany("QualityStandards")
                        .HasForeignKey("ProductSpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("ProductSpecification");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Requests.InspectionRequest", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Creator")
                        .WithMany("CreatedInspectionRequests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.ProductionPlans.ProductionSeries", "ProductionSeries")
                        .WithMany("InspectionRequests")
                        .HasForeignKey("ProductionSeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Reviewer")
                        .WithMany("ReviewedInspectionRequests")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("ProductionSeries");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Requests.WarehouseRequest", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Creator")
                        .WithMany("CreatedWarehouseRequests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.ProductionPlans.ProductionRequirement", "ProductionRequirement")
                        .WithMany("WarehouseRequests")
                        .HasForeignKey("ProductionRequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Reviewer")
                        .WithMany("ReviewedWarehouseRequests")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("ProductionRequirement");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.FaultyProduct", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Results.InspectionRequestResult", "InspectionRequestResult")
                        .WithMany("FaultyProducts")
                        .HasForeignKey("InspectionRequestResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Products.Specifications.ProductSpecification", "Specification")
                        .WithMany("FaultyProducts")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InspectionRequestResult");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.InspectionRequestResult", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Creator")
                        .WithMany("InspectionRequestResults")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Requests.InspectionRequest", "InspectionRequest")
                        .WithOne("InspectionRequestResult")
                        .HasForeignKey("GPMS.Backend.Data.Models.Results.InspectionRequestResult", "InspectionRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("InspectionRequest");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.ProductFault", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Results.FaultyProduct", "FaultyProduct")
                        .WithMany("ProductFaults")
                        .HasForeignKey("FaultyProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Products.Specifications.Measurement", "ProductMeasurement")
                        .WithMany("ProductFaults")
                        .HasForeignKey("ProductMeasurementId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStep", "ProductionProcessStep")
                        .WithMany("ProductFaults")
                        .HasForeignKey("ProductionProcessStepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Products.Specifications.QualityStandard", "QualityStandard")
                        .WithMany("ProductFaults")
                        .HasForeignKey("QualityStandardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FaultyProduct");

                    b.Navigation("ProductMeasurement");

                    b.Navigation("ProductionProcessStep");

                    b.Navigation("QualityStandard");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.ProductionProcessStepIOResult", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStepIO", "ProductionProcessStepIO")
                        .WithMany("ProductionProcessStepIOResults")
                        .HasForeignKey("StepIOId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Results.ProductionProcessStepResult", "ProductionProcessStepResult")
                        .WithMany("StepIOResults")
                        .HasForeignKey("StepResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductionProcessStepIO");

                    b.Navigation("ProductionProcessStepResult");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.ProductionProcessStepResult", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Staff", "Creator")
                        .WithMany("productionProcessStepResults")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Results.InspectionRequestResult", "InspectionRequestResult")
                        .WithOne("ProductionProcessStepResult")
                        .HasForeignKey("GPMS.Backend.Data.Models.Results.ProductionProcessStepResult", "InspectionRequestResultId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStep", "ProductionProcessStep")
                        .WithMany("ProductionProcessStepResults")
                        .HasForeignKey("ProductionProcessStepId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GPMS.Backend.Data.Models.ProductionPlans.ProductionSeries", "ProductionSeries")
                        .WithMany("ProductionProcessStepResults")
                        .HasForeignKey("ProductionSeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("InspectionRequestResult");

                    b.Navigation("ProductionProcessStep");

                    b.Navigation("ProductionSeries");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Staffs.Staff", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("GPMS.Backend.Data.Models.Staffs.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Staffs.Department", "Department")
                        .WithMany("Staffs")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Account");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Warehouses.WarehouseTicket", b =>
                {
                    b.HasOne("GPMS.Backend.Data.Models.Products.Specifications.ProductSpecification", "ProductSpecification")
                        .WithMany("WarehouseTickets")
                        .HasForeignKey("ProductSpecificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GPMS.Backend.Data.Models.Warehouses.Warehouse", "Warehouse")
                        .WithMany("WarehouseTickets")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPMS.Backend.Data.Models.Requests.WarehouseRequest", "WarehouseRequest")
                        .WithOne("WarehouseTicket")
                        .HasForeignKey("GPMS.Backend.Data.Models.Warehouses.WarehouseTicket", "WarehouseRequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProductSpecification");

                    b.Navigation("Warehouse");

                    b.Navigation("WarehouseRequest");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionEstimation", b =>
                {
                    b.Navigation("ProductionSeries");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionPlan", b =>
                {
                    b.Navigation("ChildProductionPlans");

                    b.Navigation("ProductionRequirements");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionRequirement", b =>
                {
                    b.Navigation("ProductionEstimations");

                    b.Navigation("WarehouseRequests");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.ProductionPlans.ProductionSeries", b =>
                {
                    b.Navigation("InspectionRequests");

                    b.Navigation("ProductionProcessStepResults");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Material", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("ProcessStepIOs");

                    b.Navigation("QualityStandards");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Product", b =>
                {
                    b.Navigation("ProductionProcesses");

                    b.Navigation("SemiFinishedProducts");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductProductionProcess", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStep", b =>
                {
                    b.Navigation("ProductFaults");

                    b.Navigation("ProductionProcessStepIOs");

                    b.Navigation("ProductionProcessStepResults");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.ProductionProcesses.ProductionProcessStepIO", b =>
                {
                    b.Navigation("ProductionProcessStepIOResults");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.SemiFinishedProduct", b =>
                {
                    b.Navigation("ProductionProcessStepIOs");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.Measurement", b =>
                {
                    b.Navigation("ProductFaults");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.ProductSpecification", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("FaultyProducts");

                    b.Navigation("Measurements");

                    b.Navigation("ProductionRequirements");

                    b.Navigation("QualityStandards");

                    b.Navigation("WarehouseTickets");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Products.Specifications.QualityStandard", b =>
                {
                    b.Navigation("ProductFaults");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Requests.InspectionRequest", b =>
                {
                    b.Navigation("InspectionRequestResult");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Requests.WarehouseRequest", b =>
                {
                    b.Navigation("WarehouseTicket");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.FaultyProduct", b =>
                {
                    b.Navigation("ProductFaults");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.InspectionRequestResult", b =>
                {
                    b.Navigation("FaultyProducts");

                    b.Navigation("ProductionProcessStepResult")
                        .IsRequired();
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Results.ProductionProcessStepResult", b =>
                {
                    b.Navigation("StepIOResults");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Staffs.Account", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Staffs.Department", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Staffs.Staff", b =>
                {
                    b.Navigation("CreatedInspectionRequests");

                    b.Navigation("CreatedProductionPlans");

                    b.Navigation("CreatedProducts");

                    b.Navigation("CreatedWarehouseRequests");

                    b.Navigation("InspectionRequestResults");

                    b.Navigation("ReviewedInspectionRequests");

                    b.Navigation("ReviewedProductionPlans");

                    b.Navigation("ReviewedProducts");

                    b.Navigation("ReviewedWarehouseRequests");

                    b.Navigation("productionProcessStepResults");
                });

            modelBuilder.Entity("GPMS.Backend.Data.Models.Warehouses.Warehouse", b =>
                {
                    b.Navigation("Specifications");

                    b.Navigation("WarehouseTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
